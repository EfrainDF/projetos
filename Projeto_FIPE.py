import os
import requests
import dotenv
import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import time

# Carrega a chave da API
dotenv.load_dotenv()
TOKEN = os.getenv("CHAVE_API_FIPE")

HEADERS = {
    "accept": "application/json",
    "X-Subscription-Token": TOKEN,
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/115.0.0.0 Safari/537.36"
}

URL_BASE = "https://fipe.parallelum.com.br/api/v2"
NUM_MESES = 24


@st.cache_data(show_spinner=False)
def requisitar_dados(endpoint, parametros=None):
    try:
        resposta = requests.get(f"{URL_BASE}/{endpoint}", headers=HEADERS, params=parametros)
        resposta.raise_for_status()
        return resposta.json()
    except requests.RequestException:
        return None


def ordenar_marcas_por_relevancia(marcas):
    if not marcas:
        return []
    prioridades = [
        "VolksWagen", "Fiat", "Chevrolet", "Toyota", "Ford", "Honda",
        "Hyundai", "Renault", "Nissan", "Jeep", "Peugeot", "Citro√´n", "Mitsubishi"
    ]
    principais = [m for m in marcas if any(p in m['name'] for p in prioridades)]
    demais = [m for m in marcas if m not in principais]
    return principais + sorted(demais, key=lambda x: x['name'])


@st.cache_data(show_spinner=False)
def consultar_preco_por_referencia(cod_marca, cod_modelo, cod_ano, ref_code):
    url = f"{URL_BASE}/cars/brands/{cod_marca}/models/{cod_modelo}/years/{cod_ano}"
    params = {"reference": ref_code}
    try:
        resposta = requests.get(url, headers=HEADERS, params=params)
        resposta.raise_for_status()
        dados = resposta.json()
        return dados.get("price", None)
    except:
        return None


def obter_codigo_por_nome(lista, chave_nome):
    if not lista or not isinstance(lista, list):
        return None
    for item in lista:
        if chave_nome.lower() in item['name'].lower():
            return item['code']
    return None


@st.cache_data(show_spinner=False)
def obter_historico_veiculo(marca, modelo_nome, ano_str):
    marcas = requisitar_dados("cars/brands")
    if not marcas:
        st.error("‚ùå Erro ao obter marcas.")
        return None

    cod_marca = obter_codigo_por_nome(marcas, marca)
    if not cod_marca:
        return None

    modelos = requisitar_dados(f"cars/brands/{cod_marca}/models")
    if not modelos:
        st.error("‚ùå Erro ao obter modelos.")
        return None

    cod_modelo = obter_codigo_por_nome(modelos, modelo_nome)
    if not cod_modelo:
        return None

    anos = requisitar_dados(f"cars/brands/{cod_marca}/models/{cod_modelo}/years")
    if not anos:
        st.error("‚ùå Erro ao obter anos para o modelo.")
        return None

    cod_ano = obter_codigo_por_nome(anos, str(ano_str))
    if not cod_ano:
        return None

    referencias = requisitar_dados("references")
    if not referencias:
        st.error("‚ùå Erro ao obter refer√™ncias FIPE.")
        return None

    historico = []
    for ref in referencias[:NUM_MESES + 1]:
        ref_code = ref["code"]
        preco_str = consultar_preco_por_referencia(cod_marca, cod_modelo, cod_ano, ref_code)
        if preco_str:
            try:
                preco = float(preco_str.replace("R$", "").replace(".", "").replace(",", "."))
                historico.append({
                    "Refer√™ncia": ref_code,
                    "M√™s": ref["month"],
                    "Pre√ßo (R$)": preco
                })
            except:
                continue
    if len(historico) < 2:
        return None

    df = pd.DataFrame(historico).sort_values("Refer√™ncia").reset_index(drop=True)
    df["Varia√ß√£o (R$)"] = df["Pre√ßo (R$)"].diff()
    df["Varia√ß√£o (%)"] = (df["Pre√ßo (R$)"] / df["Pre√ßo (R$)"].shift(1) - 1) * 100
    df = df.iloc[1:].reset_index(drop=True)
    return df


def calcular_variacao_percentual(df):
    if len(df) < 2:
        return None
    preco_inicial = df["Pre√ßo (R$)"].iloc[0]
    preco_final = df["Pre√ßo (R$)"].iloc[-1]
    return (preco_final - preco_inicial) / preco_inicial * 100


def exibir_historico(df, veiculo_nome=None):
    preco_atual = df["Pre√ßo (R$)"].iloc[-1]
    preco_anterior = df["Pre√ßo (R$)"].iloc[-2]
    preco_mais_antigo = df["Pre√ßo (R$)"].iloc[0]
    variacao_mensal = preco_atual - preco_anterior
    variacao_mensal_perc = (preco_atual / preco_anterior - 1) * 100
    variacao_total = preco_atual - preco_mais_antigo
    variacao_total_perc = (preco_atual / preco_mais_antigo - 1) * 100

    seta = "‚¨ÜÔ∏è" if variacao_mensal > 0 else "‚¨áÔ∏è"
    cor_seta = "green" if variacao_mensal > 0 else "red"

    col1, col2 = st.columns([1.3, 3], gap="large")
    with col1:
        st.markdown("### üí∞ Pre√ßo Atual")
        st.markdown(f"""
            <div style="font-size:30px; font-weight:bold">R$ {preco_atual:,.2f}</div>
            <div style="color:{cor_seta}; font-size:18px;">{seta} {variacao_mensal:+,.2f} ({variacao_mensal_perc:+.2f}%) <span style="color:gray; font-size:14px;">(√∫ltimo m√™s)</span></div>
            <div style="color:gray; font-size:16px;">üìä Acumulado em {NUM_MESES} meses: R$ {variacao_total:+,.2f} ({variacao_total_perc:+.2f}%)</div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown("### üìà Evolu√ß√£o dos Pre√ßos")
        fig = px.line(df, x="M√™s", y="Pre√ßo (R$)", markers=True,
                      title=f"Hist√≥rico de Pre√ßos FIPE ‚Äì √öltimos {NUM_MESES} meses" + (
                          f" - {veiculo_nome}" if veiculo_nome else ""))
        fig.update_layout(
            xaxis_title="M√™s de Refer√™ncia",
            yaxis_title="Pre√ßo (R$)",
            yaxis_range=[df["Pre√ßo (R$)"].min() * 0.75, df["Pre√ßo (R$)"].max() * 1.25],
            hovermode="x unified"
        )
        st.plotly_chart(fig, use_container_width=True)


def exibir_comparacao_veiculos(veiculos_comparacao, df_veiculo_buscado=None, veiculo_buscado_nome=None):
    if not veiculos_comparacao:
        return

    # Calcular varia√ß√£o percentual para todos os ve√≠culos
    variacoes = []
    for nome, df in veiculos_comparacao:
        variacao = calcular_variacao_percentual(df)
        if variacao is not None:
            variacoes.append((nome, variacao))

    # Adicionar o ve√≠culo buscado √† compara√ß√£o se existir
    if df_veiculo_buscado is not None:
        variacao_buscado = calcular_variacao_percentual(df_veiculo_buscado)
        if variacao_buscado is not None:
            variacoes.append((f"üîç {veiculo_buscado_nome}", variacao_buscado))

    if not variacoes:
        return

    # Criar DataFrame para o gr√°fico
    df_comparacao = pd.DataFrame(variacoes, columns=["Ve√≠culo", "Varia√ß√£o (%)"])
    df_comparacao = df_comparacao.sort_values("Varia√ß√£o (%)", ascending=False)

    # Criar gr√°fico de barras
    fig = go.Figure()

    for i, row in df_comparacao.iterrows():
        cor = "green" if row["Varia√ß√£o (%)"] >= 0 else "red"
        fig.add_trace(go.Bar(
            x=[row["Ve√≠culo"]],
            y=[row["Varia√ß√£o (%)"]],
            name=row["Ve√≠culo"],
            marker_color=cor,
            text=[f"{row['Varia√ß√£o (%)']:.2f}%"],
            textposition='auto'
        ))

    title = "Compara√ß√£o de Valoriza√ß√£o/Desvaloriza√ß√£o" + (
        f" (com {veiculo_buscado_nome})" if df_veiculo_buscado is not None else ""
    )

    fig.update_layout(
        title=f"{title} ‚Äì √öltimos {NUM_MESES} Meses",
        xaxis_title="Ve√≠culo",
        yaxis_title="Varia√ß√£o Percentual (%)",
        showlegend=False,
        hovermode="x"
    )

    st.markdown("### üìä Compara√ß√£o de Ve√≠culos")
    st.plotly_chart(fig, use_container_width=True)


def carregar_veiculos_fixos():
    veiculos_fixos = [
        ("Toyota Corolla XEi 2.0 Flex (2012)", "Toyota", "Corolla XEi 2.0 Flex 16V Aut.", 2012),
        ("Nissan Sentra SL 2.0 Flex (2016)", "Nissan", "Sentra SL 2.0/ 2.0 Flex Fuel 16V Aut.", 2016),
        ("Honda Civic Sed. LXL 1.8 Flex (2013)", "Honda", "Civic Sed. LXL/ LXL SE 1.8 Flex 16V Aut.", 2013),
        ("Hyundai ix35 GLS 2.0 Flex (2012)", "Hyundai", "ix35 GLS 2.0 16V 2WD Flex Aut.", 2012),
        ("Hyundai Santa Fe 3.3 V6 (2012)", "Hyundai", "Santa Fe/GLS 3.3 V6 4X4 Tiptronic", 2012),
        ("Kia Sportage EX 2.0 Flex (2012)", "Kia Motors", "Sportage EX 2.0 16V/ 2.0 16V Flex Aut.", 2012),
    ]

    progresso = st.progress(0, text="Carregando ve√≠culos de refer√™ncia...")
    veiculos_comparacao = []
    total = len(veiculos_fixos)

    for i, (nome, marca, modelo, ano) in enumerate(veiculos_fixos):
        progresso.progress((i + 1) / total, text=f"Carregando {nome}...")
        try:
            df = obter_historico_veiculo(marca, modelo, ano)
            if df is not None:
                veiculos_comparacao.append((nome, df))
            else:
                st.warning(f"‚ùå Hist√≥rico n√£o encontrado para {nome}")
                print(f"[NULO] {nome} - marca: {marca} / modelo: {modelo} / ano: {ano}")
        except Exception as e:
            st.warning(f"‚ùå Erro ao carregar {nome}: {str(e)}")
            print(f"[ERRO] {nome} - marca: {marca} / modelo: {modelo} / ano: {ano} ‚Üí {str(e)}")
        time.sleep(0.1)  # Delay apenas visual

    progresso.empty()
    return veiculos_comparacao, veiculos_fixos


def main():
    st.set_page_config(page_title="FIPE ‚Äì Hist√≥rico de Pre√ßo", layout="wide")
    st.title(f"üöó Consulta Tabela FIPE ‚Äì √öltimos {NUM_MESES} Meses")

    # üîç Buscador de ve√≠culos - exibido antes dos fixos
    st.markdown("### üîç Buscar Ve√≠culo")

    marcas = requisitar_dados("cars/brands")
    if not marcas:
        st.stop()

    marcas_ordenadas = ordenar_marcas_por_relevancia(marcas)
    nome_para_codigo = {f"{m['name']} (c√≥d: {m['code']})": m['code'] for m in marcas_ordenadas}
    marca_escolhida = st.selectbox("üìå Selecione uma marca:", [""] + list(nome_para_codigo.keys()), index=0)

    df_veiculo_buscado = None
    veiculo_buscado_nome = None

    if marca_escolhida:
        cod_marca = nome_para_codigo[marca_escolhida]
        modelos = requisitar_dados(f"cars/brands/{cod_marca}/models")
        if not modelos:
            st.warning("‚ö†Ô∏è Nenhum modelo dispon√≠vel para esta marca.")
            st.stop()

        modelos_ordenados = sorted(modelos, key=lambda x: x['name'])
        nome_para_modelo = {m["name"]: m["code"] for m in modelos_ordenados}
        modelo_selecionado = st.selectbox("üìã Selecione o modelo:", [""] + list(nome_para_modelo.keys()), index=0)

        if modelo_selecionado:
            cod_modelo = nome_para_modelo[modelo_selecionado]
            anos = requisitar_dados(f"cars/brands/{cod_marca}/models/{cod_modelo}/years")
            if not anos:
                st.warning("‚ö†Ô∏è Nenhum ano dispon√≠vel para este modelo.")
                st.stop()

            nome_para_ano = {a["name"]: a["code"] for a in anos}
            ano_escolhido = st.selectbox("üìÖ Selecione o ano:", [""] + list(nome_para_ano.keys()), index=0)

            if ano_escolhido:
                veiculo_buscado_nome = f"{marca_escolhida.split(' (')[0]} {modelo_selecionado} ({ano_escolhido.split(' ')[0]})"

                with st.spinner(f'Buscando dados para {veiculo_buscado_nome}...'):
                    df_veiculo_buscado = obter_historico_veiculo(
                        marca_escolhida.split(' (')[0],
                        modelo_selecionado,
                        ano_escolhido.split(' ')[0]
                    )

                if df_veiculo_buscado is not None:
                    st.markdown("---")
                    exibir_historico(df_veiculo_buscado, veiculo_buscado_nome)
                else:
                    st.warning("‚ö†Ô∏è Nenhum hist√≥rico de pre√ßo dispon√≠vel para esse ve√≠culo.")

    # üí§ Aguarda brevemente antes de carregar ve√≠culos fixos
    time.sleep(0.8)

    # üöò Ve√≠culos fixos
    st.markdown("---")
    st.markdown("### üîç Ve√≠culos de Refer√™ncia (Hist√≥rico Completo)")

    with st.spinner('Carregando dados de refer√™ncia...'):
        veiculos_comparacao, veiculos_fixos = carregar_veiculos_fixos()

    if veiculos_comparacao:
        # Compara√ß√£o agora inclui o ve√≠culo buscado, se houver
        exibir_comparacao_veiculos(veiculos_comparacao, df_veiculo_buscado, veiculo_buscado_nome)

    # Exibe hist√≥rico individual de cada fixo
    for nome, df in veiculos_comparacao:
        st.markdown(f"#### üîß {nome}")
        exibir_historico(df, nome)


if __name__ == "__main__":
    main()